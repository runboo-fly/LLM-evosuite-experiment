/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 14 12:20:47 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AVLNode_ESTest extends AVLNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object1);
      assertNotNull(aVLNode0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Object> aVLNode1 = new AVLNode<Object>(object0, aVLNode0, aVLNode0);
      assertNotNull(aVLNode1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      
      AVLNode<Object> aVLNode2 = aVLNode1.delete(aVLNode0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertNull(aVLNode2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      
      AVLNode<Object> aVLNode3 = aVLNode1.delete(object1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode0, aVLNode3);
      assertNotSame(aVLNode1, aVLNode0);
      assertSame(aVLNode1, aVLNode3);
      assertSame(aVLNode3, aVLNode1);
      assertNotSame(aVLNode3, aVLNode0);
      assertNotNull(aVLNode3);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode3.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(2, aVLNode3.getHeight());
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      AVLNode<Object> aVLNode4 = aVLNode0.insert(object2);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertNotSame(aVLNode4, aVLNode3);
      assertSame(aVLNode4, aVLNode0);
      assertNotSame(aVLNode4, aVLNode1);
      assertNotNull(aVLNode4);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(aVLNode4.equals((Object)aVLNode3));
      assertFalse(aVLNode4.equals((Object)aVLNode1));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode4.getHeight());
      
      AVLNode<Object> aVLNode5 = aVLNode4.insert(object0);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode5);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertNotSame(aVLNode4, aVLNode3);
      assertSame(aVLNode4, aVLNode0);
      assertSame(aVLNode4, aVLNode5);
      assertNotSame(aVLNode4, aVLNode1);
      assertNotSame(aVLNode5, aVLNode3);
      assertSame(aVLNode5, aVLNode4);
      assertSame(aVLNode5, aVLNode0);
      assertNotSame(aVLNode5, aVLNode1);
      assertNotNull(aVLNode5);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(aVLNode4.equals((Object)aVLNode3));
      assertFalse(aVLNode4.equals((Object)aVLNode1));
      assertFalse(aVLNode5.equals((Object)aVLNode3));
      assertFalse(aVLNode5.equals((Object)aVLNode1));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode4.getHeight());
      assertEquals(2, aVLNode5.getHeight());
      
      AVLNode<Object> aVLNode6 = aVLNode1.insert(aVLNode0);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode5);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode4);
      assertSame(aVLNode0, aVLNode6);
      assertNotSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode5);
      assertNotSame(aVLNode1, aVLNode4);
      assertNotSame(aVLNode1, aVLNode6);
      assertSame(aVLNode1, aVLNode3);
      assertSame(aVLNode6, aVLNode4);
      assertNotSame(aVLNode6, aVLNode1);
      assertNotSame(aVLNode6, aVLNode3);
      assertSame(aVLNode6, aVLNode5);
      assertSame(aVLNode6, aVLNode0);
      assertNotNull(aVLNode6);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode1.equals((Object)aVLNode5));
      assertFalse(aVLNode1.equals((Object)aVLNode4));
      assertFalse(aVLNode6.equals((Object)aVLNode1));
      assertFalse(aVLNode6.equals((Object)aVLNode3));
      assertEquals(3, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(3, aVLNode6.getHeight());
      
      Integer integer0 = new Integer((-93));
      assertEquals((-93), (int)integer0);
      assertNotNull(integer0);
      
      AVLNode<Object> aVLNode7 = aVLNode4.insert(integer0);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode7);
      assertSame(aVLNode0, aVLNode5);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode4);
      assertSame(aVLNode0, aVLNode6);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertSame(aVLNode4, aVLNode6);
      assertNotSame(aVLNode4, aVLNode3);
      assertSame(aVLNode4, aVLNode7);
      assertSame(aVLNode4, aVLNode0);
      assertSame(aVLNode4, aVLNode5);
      assertNotSame(aVLNode4, aVLNode1);
      assertSame(aVLNode7, aVLNode6);
      assertSame(aVLNode7, aVLNode5);
      assertNotSame(aVLNode7, aVLNode1);
      assertSame(aVLNode7, aVLNode4);
      assertNotSame(aVLNode7, aVLNode3);
      assertSame(aVLNode7, aVLNode0);
      assertNotNull(aVLNode7);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(aVLNode4.equals((Object)aVLNode3));
      assertFalse(aVLNode4.equals((Object)aVLNode1));
      assertFalse(aVLNode7.equals((Object)aVLNode1));
      assertFalse(aVLNode7.equals((Object)aVLNode3));
      assertEquals(3, aVLNode0.getHeight());
      assertEquals(3, aVLNode4.getHeight());
      assertEquals(3, aVLNode7.getHeight());
      
      AVLNode<Object> aVLNode8 = aVLNode0.delete(object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode7);
      assertSame(aVLNode0, aVLNode5);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode0, aVLNode8);
      assertNotSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode4);
      assertSame(aVLNode0, aVLNode6);
      assertNotSame(aVLNode8, aVLNode3);
      assertNotSame(aVLNode8, aVLNode6);
      assertNotSame(aVLNode8, aVLNode5);
      assertNotSame(aVLNode8, aVLNode4);
      assertNotSame(aVLNode8, aVLNode7);
      assertNotSame(aVLNode8, aVLNode0);
      assertNotSame(aVLNode8, aVLNode1);
      assertNotNull(aVLNode8);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertFalse(aVLNode8.equals((Object)aVLNode3));
      assertFalse(aVLNode8.equals((Object)aVLNode6));
      assertFalse(aVLNode8.equals((Object)aVLNode5));
      assertFalse(aVLNode8.equals((Object)aVLNode4));
      assertFalse(aVLNode8.equals((Object)aVLNode7));
      assertFalse(aVLNode8.equals((Object)aVLNode0));
      assertFalse(aVLNode8.equals((Object)aVLNode1));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(3, aVLNode8.getHeight());
      
      Integer integer1 = new Integer((-93));
      assertEquals((-93), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AVLNode<Object> aVLNode9 = aVLNode8.insert(integer1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode7);
      assertNotSame(aVLNode0, aVLNode9);
      assertSame(aVLNode0, aVLNode5);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode0, aVLNode8);
      assertNotSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode4);
      assertSame(aVLNode0, aVLNode6);
      assertNotSame(aVLNode8, aVLNode3);
      assertNotSame(aVLNode8, aVLNode6);
      assertNotSame(aVLNode8, aVLNode5);
      assertNotSame(aVLNode8, aVLNode4);
      assertNotSame(aVLNode8, aVLNode7);
      assertNotSame(aVLNode8, aVLNode0);
      assertSame(aVLNode8, aVLNode9);
      assertNotSame(aVLNode8, aVLNode1);
      assertNotSame(aVLNode9, aVLNode4);
      assertNotSame(aVLNode9, aVLNode1);
      assertSame(aVLNode9, aVLNode8);
      assertNotSame(aVLNode9, aVLNode3);
      assertNotSame(aVLNode9, aVLNode5);
      assertNotSame(aVLNode9, aVLNode6);
      assertNotSame(aVLNode9, aVLNode0);
      assertNotSame(aVLNode9, aVLNode7);
      assertNotNull(aVLNode9);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode0.equals((Object)aVLNode8));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertFalse(aVLNode8.equals((Object)aVLNode3));
      assertFalse(aVLNode8.equals((Object)aVLNode6));
      assertFalse(aVLNode8.equals((Object)aVLNode5));
      assertFalse(aVLNode8.equals((Object)aVLNode4));
      assertFalse(aVLNode8.equals((Object)aVLNode7));
      assertFalse(aVLNode8.equals((Object)aVLNode0));
      assertFalse(aVLNode8.equals((Object)aVLNode1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(aVLNode9.equals((Object)aVLNode4));
      assertFalse(aVLNode9.equals((Object)aVLNode1));
      assertFalse(aVLNode9.equals((Object)aVLNode3));
      assertFalse(aVLNode9.equals((Object)aVLNode5));
      assertFalse(aVLNode9.equals((Object)aVLNode6));
      assertFalse(aVLNode9.equals((Object)aVLNode0));
      assertFalse(aVLNode9.equals((Object)aVLNode7));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(3, aVLNode8.getHeight());
      assertEquals(3, aVLNode9.getHeight());
      
      AVLNode<Object> aVLNode10 = aVLNode8.delete(aVLNode6);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode7);
      assertNotSame(aVLNode0, aVLNode9);
      assertSame(aVLNode0, aVLNode5);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode0, aVLNode10);
      assertNotSame(aVLNode0, aVLNode8);
      assertNotSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode4);
      assertSame(aVLNode0, aVLNode6);
      assertNotSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode5);
      assertNotSame(aVLNode1, aVLNode4);
      assertNotSame(aVLNode1, aVLNode10);
      assertNotSame(aVLNode1, aVLNode6);
      assertNotSame(aVLNode1, aVLNode7);
      assertNotSame(aVLNode1, aVLNode8);
      assertNotSame(aVLNode1, aVLNode9);
      assertSame(aVLNode1, aVLNode3);
      assertSame(aVLNode6, aVLNode4);
      assertNotSame(aVLNode6, aVLNode1);
      assertNotSame(aVLNode6, aVLNode3);
      assertNotSame(aVLNode6, aVLNode10);
      assertSame(aVLNode6, aVLNode5);
      assertSame(aVLNode6, aVLNode0);
      assertSame(aVLNode6, aVLNode7);
      assertNotSame(aVLNode6, aVLNode9);
      assertNotSame(aVLNode6, aVLNode8);
      assertNotSame(aVLNode8, aVLNode3);
      assertNotSame(aVLNode8, aVLNode6);
      assertNotSame(aVLNode8, aVLNode10);
      assertNotSame(aVLNode8, aVLNode5);
      assertNotSame(aVLNode8, aVLNode4);
      assertNotSame(aVLNode8, aVLNode7);
      assertNotSame(aVLNode8, aVLNode0);
      assertSame(aVLNode8, aVLNode9);
      assertNotSame(aVLNode8, aVLNode1);
      assertNotSame(aVLNode10, aVLNode0);
      assertNotSame(aVLNode10, aVLNode3);
      assertNotSame(aVLNode10, aVLNode7);
      assertNotSame(aVLNode10, aVLNode9);
      assertNotSame(aVLNode10, aVLNode8);
      assertNotSame(aVLNode10, aVLNode5);
      assertNotSame(aVLNode10, aVLNode6);
      assertNotSame(aVLNode10, aVLNode4);
      assertNotSame(aVLNode10, aVLNode1);
      assertNotNull(aVLNode10);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode9));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode0.equals((Object)aVLNode8));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode1.equals((Object)aVLNode5));
      assertFalse(aVLNode1.equals((Object)aVLNode4));
      assertFalse(aVLNode1.equals((Object)aVLNode6));
      assertFalse(aVLNode1.equals((Object)aVLNode7));
      assertFalse(aVLNode1.equals((Object)aVLNode8));
      assertFalse(aVLNode1.equals((Object)aVLNode9));
      assertFalse(aVLNode6.equals((Object)aVLNode1));
      assertFalse(aVLNode6.equals((Object)aVLNode3));
      assertFalse(aVLNode6.equals((Object)aVLNode9));
      assertFalse(aVLNode6.equals((Object)aVLNode8));
      assertFalse(aVLNode8.equals((Object)aVLNode3));
      assertFalse(aVLNode8.equals((Object)aVLNode6));
      assertFalse(aVLNode8.equals((Object)aVLNode5));
      assertFalse(aVLNode8.equals((Object)aVLNode4));
      assertFalse(aVLNode8.equals((Object)aVLNode7));
      assertFalse(aVLNode8.equals((Object)aVLNode0));
      assertFalse(aVLNode8.equals((Object)aVLNode1));
      assertFalse(aVLNode10.equals((Object)aVLNode0));
      assertFalse(aVLNode10.equals((Object)aVLNode3));
      assertFalse(aVLNode10.equals((Object)aVLNode7));
      assertFalse(aVLNode10.equals((Object)aVLNode9));
      assertFalse(aVLNode10.equals((Object)aVLNode8));
      assertFalse(aVLNode10.equals((Object)aVLNode5));
      assertFalse(aVLNode10.equals((Object)aVLNode6));
      assertFalse(aVLNode10.equals((Object)aVLNode4));
      assertFalse(aVLNode10.equals((Object)aVLNode1));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(1, aVLNode6.getHeight());
      assertEquals(2, aVLNode8.getHeight());
      assertEquals(3, aVLNode10.getHeight());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1671));
      assertEquals((-1671), (int)integer0);
      assertNotNull(integer0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(integer0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Object> aVLNode1 = new AVLNode<Object>(integer0, aVLNode0, aVLNode0);
      assertNotNull(aVLNode1);
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      
      AVLNode<Object> aVLNode2 = aVLNode1.getRight();
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode2);
      assertNotSame(aVLNode2, aVLNode1);
      assertSame(aVLNode2, aVLNode0);
      assertNotNull(aVLNode2);
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode2.equals((Object)aVLNode1));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(1, aVLNode2.getHeight());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AVLNode<Integer> aVLNode0 = new AVLNode<Integer>(integer0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Integer> aVLNode1 = aVLNode0.getLeft();
      assertNull(aVLNode1);
      assertEquals(1, aVLNode0.getHeight());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>((Object) null);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      // Undeclared exception!
      try { 
        aVLNode0.search(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLNode<Object> aVLNode0 = new AVLNode<Object>((Object) null);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      Object object0 = aVLNode0.getElement();
      assertNull(object0);
      assertEquals(1, aVLNode0.getHeight());
      
      try { 
        aVLNode0.insert(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      assertEquals((-6), (int)integer0);
      assertNotNull(integer0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(integer0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      // Undeclared exception!
      try { 
        aVLNode0.findMin((AVLNode<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLNode<Integer> aVLNode0 = new AVLNode<Integer>((Integer) null);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      // Undeclared exception!
      try { 
        aVLNode0.delete((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1671));
      assertEquals((-1671), (int)integer0);
      assertNotNull(integer0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(integer0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Object> aVLNode1 = new AVLNode<Object>(integer0, aVLNode0, aVLNode0);
      assertNotNull(aVLNode1);
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = aVLNode1.search(object0);
      assertFalse(boolean0);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      boolean boolean0 = aVLNode0.search(object0);
      assertTrue(boolean0);
      assertEquals(1, aVLNode0.getHeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AVLNode<Integer> aVLNode0 = new AVLNode<Integer>(integer0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Integer> aVLNode1 = new AVLNode<Integer>(integer0, aVLNode0, aVLNode0);
      assertNotNull(aVLNode1);
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean0 = aVLNode1.search(integer1);
      assertFalse(boolean0);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1671));
      assertEquals((-1671), (int)integer0);
      assertNotNull(integer0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(integer0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = aVLNode0.search(object0);
      assertFalse(boolean0);
      assertEquals(1, aVLNode0.getHeight());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      Integer integer0 = new Integer((-1257));
      assertEquals((-1257), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = aVLNode0.search(integer0);
      assertFalse(boolean0);
      assertEquals(1, aVLNode0.getHeight());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-2182));
      assertEquals((-2182), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3999);
      assertEquals(3999, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AVLNode<Integer> aVLNode0 = new AVLNode<Integer>(integer1);
      assertNotNull(aVLNode0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Integer> aVLNode1 = aVLNode0.insert(integer0);
      assertSame(aVLNode0, aVLNode1);
      assertSame(aVLNode1, aVLNode0);
      assertNotNull(aVLNode1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      
      AVLNode<Integer> aVLNode2 = aVLNode1.findMin(aVLNode0);
      assertNotSame(aVLNode0, aVLNode2);
      assertSame(aVLNode0, aVLNode1);
      assertSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode2);
      assertNotSame(aVLNode2, aVLNode0);
      assertNotSame(aVLNode2, aVLNode1);
      assertNotNull(aVLNode2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(aVLNode2.equals((Object)aVLNode0));
      assertFalse(aVLNode2.equals((Object)aVLNode1));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(1, aVLNode2.getHeight());
      
      AVLNode<Integer> aVLNode3 = new AVLNode<Integer>(integer0, aVLNode2, aVLNode1);
      assertNotNull(aVLNode3);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(aVLNode0.equals((Object)aVLNode2));
      assertFalse(aVLNode1.equals((Object)aVLNode2));
      assertFalse(aVLNode2.equals((Object)aVLNode0));
      assertFalse(aVLNode2.equals((Object)aVLNode1));
      assertFalse(aVLNode3.equals((Object)aVLNode0));
      assertFalse(aVLNode3.equals((Object)aVLNode1));
      assertFalse(aVLNode3.equals((Object)aVLNode2));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(1, aVLNode2.getHeight());
      assertEquals(3, aVLNode3.getHeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Object> aVLNode1 = new AVLNode<Object>(object0, aVLNode0, aVLNode0);
      assertNotNull(aVLNode1);
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      
      int int0 = aVLNode1.getHeight();
      assertEquals(2, int0);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      int int0 = aVLNode0.getHeight();
      assertEquals(1, int0);
      assertEquals(1, aVLNode0.getHeight());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object1);
      assertNotNull(aVLNode0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Object> aVLNode1 = new AVLNode<Object>(object0, aVLNode0, aVLNode0);
      assertNotNull(aVLNode1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      
      AVLNode<Object> aVLNode2 = aVLNode1.getLeft();
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode2);
      assertSame(aVLNode2, aVLNode0);
      assertNotSame(aVLNode2, aVLNode1);
      assertNotNull(aVLNode2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode2.equals((Object)aVLNode1));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(1, aVLNode2.getHeight());
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      AVLNode<Object> aVLNode3 = aVLNode2.insert(object2);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode3);
      assertNotSame(aVLNode1, aVLNode2);
      assertSame(aVLNode2, aVLNode0);
      assertNotSame(aVLNode2, aVLNode1);
      assertSame(aVLNode2, aVLNode3);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertSame(aVLNode3, aVLNode0);
      assertNotSame(aVLNode3, aVLNode1);
      assertSame(aVLNode3, aVLNode2);
      assertNotNull(aVLNode3);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode1.equals((Object)aVLNode2));
      assertFalse(aVLNode2.equals((Object)aVLNode1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(aVLNode3.equals((Object)aVLNode1));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(3, aVLNode1.getHeight());
      assertEquals(2, aVLNode2.getHeight());
      assertEquals(2, aVLNode3.getHeight());
      
      AVLNode<Object> aVLNode4 = aVLNode3.insert(object0);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode4);
      assertSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode3);
      assertNotSame(aVLNode1, aVLNode4);
      assertNotSame(aVLNode1, aVLNode2);
      assertSame(aVLNode2, aVLNode4);
      assertSame(aVLNode2, aVLNode0);
      assertNotSame(aVLNode2, aVLNode1);
      assertSame(aVLNode2, aVLNode3);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertSame(aVLNode3, aVLNode0);
      assertNotSame(aVLNode3, aVLNode1);
      assertSame(aVLNode3, aVLNode2);
      assertSame(aVLNode3, aVLNode4);
      assertSame(aVLNode4, aVLNode3);
      assertSame(aVLNode4, aVLNode0);
      assertSame(aVLNode4, aVLNode2);
      assertNotSame(aVLNode4, aVLNode1);
      assertNotNull(aVLNode4);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode1.equals((Object)aVLNode3));
      assertFalse(aVLNode1.equals((Object)aVLNode2));
      assertFalse(aVLNode2.equals((Object)aVLNode1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(aVLNode3.equals((Object)aVLNode1));
      assertFalse(aVLNode4.equals((Object)aVLNode1));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(3, aVLNode1.getHeight());
      assertEquals(2, aVLNode2.getHeight());
      assertEquals(2, aVLNode3.getHeight());
      assertEquals(2, aVLNode4.getHeight());
      
      AVLNode<Object> aVLNode5 = aVLNode1.insert(aVLNode2);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(aVLNode0, aVLNode5);
      assertSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode3);
      assertSame(aVLNode1, aVLNode5);
      assertNotSame(aVLNode1, aVLNode4);
      assertNotSame(aVLNode1, aVLNode2);
      assertSame(aVLNode2, aVLNode4);
      assertSame(aVLNode2, aVLNode0);
      assertNotSame(aVLNode2, aVLNode1);
      assertSame(aVLNode2, aVLNode3);
      assertNotSame(aVLNode2, aVLNode5);
      assertNotSame(aVLNode5, aVLNode0);
      assertNotSame(aVLNode5, aVLNode2);
      assertSame(aVLNode5, aVLNode1);
      assertNotSame(aVLNode5, aVLNode3);
      assertNotSame(aVLNode5, aVLNode4);
      assertNotNull(aVLNode5);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode1.equals((Object)aVLNode3));
      assertFalse(aVLNode1.equals((Object)aVLNode4));
      assertFalse(aVLNode1.equals((Object)aVLNode2));
      assertFalse(aVLNode2.equals((Object)aVLNode1));
      assertFalse(aVLNode5.equals((Object)aVLNode0));
      assertFalse(aVLNode5.equals((Object)aVLNode2));
      assertFalse(aVLNode5.equals((Object)aVLNode3));
      assertFalse(aVLNode5.equals((Object)aVLNode4));
      assertEquals(3, aVLNode0.getHeight());
      assertEquals(4, aVLNode1.getHeight());
      assertEquals(3, aVLNode2.getHeight());
      assertEquals(4, aVLNode5.getHeight());
      
      Object object3 = aVLNode2.getElement();
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object0, object3);
      assertNotSame(object1, object0);
      assertSame(object1, object3);
      assertNotSame(object1, object2);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(aVLNode0, aVLNode5);
      assertSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode3);
      assertSame(aVLNode1, aVLNode5);
      assertNotSame(aVLNode1, aVLNode4);
      assertNotSame(aVLNode1, aVLNode2);
      assertSame(aVLNode2, aVLNode4);
      assertSame(aVLNode2, aVLNode0);
      assertNotSame(aVLNode2, aVLNode1);
      assertSame(aVLNode2, aVLNode3);
      assertNotSame(aVLNode2, aVLNode5);
      assertNotNull(object3);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode5));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode1.equals((Object)aVLNode3));
      assertFalse(aVLNode1.equals((Object)aVLNode4));
      assertFalse(aVLNode1.equals((Object)aVLNode2));
      assertFalse(aVLNode2.equals((Object)aVLNode1));
      assertFalse(aVLNode2.equals((Object)aVLNode5));
      assertEquals(3, aVLNode0.getHeight());
      assertEquals(4, aVLNode1.getHeight());
      assertEquals(3, aVLNode2.getHeight());
      
      AVLNode<Object> aVLNode6 = aVLNode4.delete(object3);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object0, object3);
      assertNotSame(object1, object0);
      assertSame(object1, object3);
      assertNotSame(object1, object2);
      assertNotSame(aVLNode0, aVLNode6);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(aVLNode0, aVLNode5);
      assertSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertNotSame(aVLNode1, aVLNode3);
      assertSame(aVLNode1, aVLNode5);
      assertNotSame(aVLNode1, aVLNode4);
      assertNotSame(aVLNode1, aVLNode6);
      assertNotSame(aVLNode1, aVLNode2);
      assertSame(aVLNode2, aVLNode4);
      assertNotSame(aVLNode2, aVLNode6);
      assertSame(aVLNode2, aVLNode0);
      assertNotSame(aVLNode2, aVLNode1);
      assertSame(aVLNode2, aVLNode3);
      assertNotSame(aVLNode2, aVLNode5);
      assertNotSame(object2, object0);
      assertNotSame(object2, object3);
      assertNotSame(object2, object1);
      assertSame(aVLNode3, aVLNode0);
      assertNotSame(aVLNode3, aVLNode6);
      assertNotSame(aVLNode3, aVLNode1);
      assertNotSame(aVLNode3, aVLNode5);
      assertSame(aVLNode3, aVLNode2);
      assertSame(aVLNode3, aVLNode4);
      assertNotSame(aVLNode4, aVLNode5);
      assertSame(aVLNode4, aVLNode3);
      assertSame(aVLNode4, aVLNode0);
      assertSame(aVLNode4, aVLNode2);
      assertNotSame(aVLNode4, aVLNode6);
      assertNotSame(aVLNode4, aVLNode1);
      assertNotSame(aVLNode6, aVLNode0);
      assertNotSame(aVLNode6, aVLNode1);
      assertNotSame(aVLNode6, aVLNode5);
      assertNotSame(aVLNode6, aVLNode4);
      assertNotSame(aVLNode6, aVLNode2);
      assertNotSame(aVLNode6, aVLNode3);
      assertNotNull(aVLNode6);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object3));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(aVLNode0.equals((Object)aVLNode5));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode1.equals((Object)aVLNode3));
      assertFalse(aVLNode1.equals((Object)aVLNode4));
      assertFalse(aVLNode1.equals((Object)aVLNode2));
      assertFalse(aVLNode2.equals((Object)aVLNode1));
      assertFalse(aVLNode2.equals((Object)aVLNode5));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object3));
      assertFalse(object2.equals((Object)object1));
      assertFalse(aVLNode3.equals((Object)aVLNode1));
      assertFalse(aVLNode3.equals((Object)aVLNode5));
      assertFalse(aVLNode4.equals((Object)aVLNode5));
      assertFalse(aVLNode4.equals((Object)aVLNode1));
      assertFalse(aVLNode6.equals((Object)aVLNode0));
      assertFalse(aVLNode6.equals((Object)aVLNode1));
      assertFalse(aVLNode6.equals((Object)aVLNode5));
      assertFalse(aVLNode6.equals((Object)aVLNode4));
      assertFalse(aVLNode6.equals((Object)aVLNode2));
      assertFalse(aVLNode6.equals((Object)aVLNode3));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(1, aVLNode2.getHeight());
      assertEquals(1, aVLNode3.getHeight());
      assertEquals(1, aVLNode4.getHeight());
      assertEquals(2, aVLNode6.getHeight());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      assertEquals((-717), (int)integer0);
      assertNotNull(integer0);
      
      AVLNode<Integer> aVLNode0 = new AVLNode<Integer>(integer0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Integer> aVLNode1 = aVLNode0.delete(integer0);
      assertNull(aVLNode1);
      assertEquals(1, aVLNode0.getHeight());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      try { 
        aVLNode0.insert(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Duplicate
         //
         verifyException("AVLNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object1);
      assertNotNull(aVLNode0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Object> aVLNode1 = aVLNode0.delete(aVLNode0);
      assertNotSame(object1, object0);
      assertNull(aVLNode1);
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, aVLNode0.getHeight());
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      AVLNode<Object> aVLNode2 = aVLNode0.insert(object2);
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertSame(aVLNode2, aVLNode0);
      assertNotNull(aVLNode2);
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode2.getHeight());
      
      AVLNode<Object> aVLNode3 = aVLNode2.insert(object0);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode3);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertNotSame(aVLNode2, aVLNode3);
      assertSame(aVLNode2, aVLNode0);
      assertNotSame(aVLNode3, aVLNode2);
      assertNotSame(aVLNode3, aVLNode0);
      assertNotNull(aVLNode3);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(aVLNode3.equals((Object)aVLNode2));
      assertFalse(aVLNode3.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(1, aVLNode2.getHeight());
      assertEquals(2, aVLNode3.getHeight());
      
      AVLNode<Object> aVLNode4 = aVLNode0.insert(aVLNode0);
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(aVLNode0, aVLNode2);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(aVLNode0, aVLNode3);
      assertSame(aVLNode4, aVLNode0);
      assertSame(aVLNode4, aVLNode2);
      assertNotSame(aVLNode4, aVLNode3);
      assertNotNull(aVLNode4);
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertFalse(aVLNode4.equals((Object)aVLNode3));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode4.getHeight());
      
      Object object3 = aVLNode0.getElement();
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object1, object3);
      assertSame(aVLNode0, aVLNode2);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(aVLNode0, aVLNode3);
      assertNotNull(object3);
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertEquals(2, aVLNode0.getHeight());
      
      AVLNode<Object> aVLNode5 = aVLNode3.delete(object3);
      assertNotSame(object0, object3);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object1, object3);
      assertSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode5);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(aVLNode0, aVLNode3);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object3);
      assertNotSame(aVLNode2, aVLNode5);
      assertSame(aVLNode2, aVLNode4);
      assertNotSame(aVLNode2, aVLNode3);
      assertSame(aVLNode2, aVLNode0);
      assertNotSame(aVLNode3, aVLNode4);
      assertNotSame(aVLNode3, aVLNode2);
      assertNotSame(aVLNode3, aVLNode0);
      assertSame(aVLNode3, aVLNode5);
      assertNotSame(aVLNode5, aVLNode4);
      assertNotSame(aVLNode5, aVLNode0);
      assertSame(aVLNode5, aVLNode3);
      assertNotSame(aVLNode5, aVLNode2);
      assertNotNull(aVLNode5);
      assertFalse(object0.equals((Object)object3));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(aVLNode0.equals((Object)aVLNode3));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object3));
      assertFalse(aVLNode2.equals((Object)aVLNode3));
      assertFalse(aVLNode3.equals((Object)aVLNode4));
      assertFalse(aVLNode3.equals((Object)aVLNode2));
      assertFalse(aVLNode3.equals((Object)aVLNode0));
      assertFalse(aVLNode5.equals((Object)aVLNode4));
      assertFalse(aVLNode5.equals((Object)aVLNode0));
      assertFalse(aVLNode5.equals((Object)aVLNode2));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode2.getHeight());
      assertEquals(2, aVLNode3.getHeight());
      assertEquals(2, aVLNode5.getHeight());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object0);
      assertNotNull(aVLNode0);
      assertEquals(1, aVLNode0.getHeight());
      
      AVLNode<Object> aVLNode1 = new AVLNode<Object>(object0, aVLNode0, aVLNode0);
      assertNotNull(aVLNode1);
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      
      AVLNode<Object> aVLNode2 = aVLNode1.delete(object0);
      assertNotSame(aVLNode0, aVLNode2);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode0);
      assertSame(aVLNode1, aVLNode2);
      assertNotSame(aVLNode2, aVLNode0);
      assertSame(aVLNode2, aVLNode1);
      assertNotNull(aVLNode2);
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode2.equals((Object)aVLNode0));
      assertEquals(1, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(2, aVLNode2.getHeight());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      AVLNode<Object> aVLNode3 = aVLNode0.insert(object1);
      assertNotSame(object0, object1);
      assertNotSame(aVLNode0, aVLNode2);
      assertSame(aVLNode0, aVLNode3);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(object1, object0);
      assertSame(aVLNode3, aVLNode0);
      assertNotSame(aVLNode3, aVLNode2);
      assertNotSame(aVLNode3, aVLNode1);
      assertNotNull(aVLNode3);
      assertFalse(object0.equals((Object)object1));
      assertFalse(aVLNode0.equals((Object)aVLNode2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(aVLNode3.equals((Object)aVLNode2));
      assertFalse(aVLNode3.equals((Object)aVLNode1));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode3.getHeight());
      
      AVLNode<Object> aVLNode4 = aVLNode1.insert(aVLNode1);
      assertNotSame(object0, object1);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(aVLNode0, aVLNode2);
      assertSame(aVLNode0, aVLNode3);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode1, aVLNode4);
      assertNotSame(aVLNode1, aVLNode3);
      assertNotSame(aVLNode1, aVLNode0);
      assertSame(aVLNode1, aVLNode2);
      assertSame(aVLNode4, aVLNode0);
      assertSame(aVLNode4, aVLNode3);
      assertNotSame(aVLNode4, aVLNode2);
      assertNotSame(aVLNode4, aVLNode1);
      assertNotNull(aVLNode4);
      assertFalse(object0.equals((Object)object1));
      assertFalse(aVLNode0.equals((Object)aVLNode2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode1.equals((Object)aVLNode3));
      assertFalse(aVLNode1.equals((Object)aVLNode0));
      assertFalse(aVLNode4.equals((Object)aVLNode2));
      assertFalse(aVLNode4.equals((Object)aVLNode1));
      assertEquals(3, aVLNode0.getHeight());
      assertEquals(2, aVLNode1.getHeight());
      assertEquals(3, aVLNode4.getHeight());
      
      AVLNode<Object> aVLNode5 = aVLNode0.delete(object0);
      assertNotSame(object0, object1);
      assertSame(aVLNode0, aVLNode4);
      assertNotSame(aVLNode0, aVLNode2);
      assertSame(aVLNode0, aVLNode3);
      assertSame(aVLNode0, aVLNode5);
      assertNotSame(aVLNode0, aVLNode1);
      assertNotSame(aVLNode5, aVLNode1);
      assertNotSame(aVLNode5, aVLNode2);
      assertSame(aVLNode5, aVLNode0);
      assertSame(aVLNode5, aVLNode3);
      assertSame(aVLNode5, aVLNode4);
      assertNotNull(aVLNode5);
      assertFalse(object0.equals((Object)object1));
      assertFalse(aVLNode0.equals((Object)aVLNode2));
      assertFalse(aVLNode0.equals((Object)aVLNode1));
      assertFalse(aVLNode5.equals((Object)aVLNode1));
      assertFalse(aVLNode5.equals((Object)aVLNode2));
      assertEquals(2, aVLNode0.getHeight());
      assertEquals(2, aVLNode5.getHeight());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object1);
      AVLNode<Object> aVLNode1 = new AVLNode<Object>(object0, aVLNode0, aVLNode0);
      aVLNode1.delete(aVLNode1);
      aVLNode1.delete(object1);
      Object object2 = new Object();
      AVLNode<Object> aVLNode2 = aVLNode0.insert(object2);
      AVLNode<Object> aVLNode3 = aVLNode2.insert(object0);
      AVLNode<Object> aVLNode4 = aVLNode1.insert(aVLNode0);
      Object object3 = new Object();
      aVLNode2.insert(object3);
      Object object4 = aVLNode3.getElement();
      aVLNode3.delete(object4);
      assertEquals(3, aVLNode0.getHeight());
      assertSame(aVLNode0, aVLNode4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object1);
      AVLNode<Object> aVLNode1 = new AVLNode<Object>(object0, aVLNode0, aVLNode0);
      aVLNode1.delete(object1);
      Object object2 = new Object();
      AVLNode<Object> aVLNode2 = aVLNode0.insert(object2);
      assertEquals(2, aVLNode0.getHeight());
      
      AVLNode<Object> aVLNode3 = aVLNode2.insert(object0);
      assertNotSame(aVLNode0, aVLNode3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object0);
      AVLNode<Object> aVLNode1 = aVLNode0.getRight();
      assertNull(aVLNode1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      AVLNode<Object> aVLNode0 = new AVLNode<Object>(object1);
      AVLNode<Object> aVLNode1 = new AVLNode<Object>(object0, aVLNode0, aVLNode0);
      AVLNode<Object> aVLNode2 = aVLNode1.getLeft();
      assertSame(aVLNode2, aVLNode0);
      
      Object object2 = new Object();
      AVLNode<Object> aVLNode3 = aVLNode2.insert(object2);
      aVLNode3.insert(object0);
      aVLNode1.insert(aVLNode2);
      Integer integer0 = new Integer((-93));
      AVLNode<Object> aVLNode4 = aVLNode3.insert(integer0);
      assertEquals(3, aVLNode2.getHeight());
      assertSame(aVLNode0, aVLNode4);
  }
}
