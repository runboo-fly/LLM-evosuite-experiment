/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 14 14:06:28 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tree_ESTest extends Tree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.insertWord("");
      tree0.toString();
      assertEquals(1, tree0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tree tree0 = new Tree();
      MockFile mockFile0 = new MockFile(" ");
      tree0.searchWords(mockFile0);
      assertEquals(0, tree0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tree tree0 = new Tree();
      MockFile mockFile0 = new MockFile(" ");
      tree0.insertWords(mockFile0);
      assertEquals(0, tree0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.insertWord("");
      int int0 = tree0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tree tree0 = new Tree();
      MockFile mockFile0 = new MockFile("Sn<]j]k<^+Q'um&~\"");
      tree0.deleteWords(mockFile0);
      assertEquals(0, tree0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tree tree0 = new Tree();
      try { 
        tree0.searchWords((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Tree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.insertWord((String) null);
      try { 
        tree0.searchWord("AVLNode");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.insertWords((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Tree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tree tree0 = new Tree();
      try { 
        tree0.deleteWords((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Tree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.insertWord("");
      try { 
        tree0.deleteWord((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.insertWord("(38J_Aa'y;49%eXG}&");
      boolean boolean0 = tree0.deleteWord("");
      assertEquals(1, tree0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.insertWord("");
      tree0.getHeight();
      assertEquals(1, tree0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tree tree0 = new Tree();
      try { 
        tree0.searchWord("54c;iQk3{c:hB8-WPd");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tree is empty
         //
         verifyException("Tree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.insertWord("");
      tree0.searchWord("");
      assertEquals(1, tree0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.insertWord("");
      tree0.insertWord("");
      boolean boolean0 = tree0.deleteWord("");
      //  // Unstable assertion: assertEquals(2, tree0.getSize());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.insertWord("");
      assertEquals(1, tree0.getSize());
      
      tree0.deleteWord("");
      int int0 = tree0.getHeight();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tree tree0 = new Tree();
      try { 
        tree0.deleteWord("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tree is empty
         //
         verifyException("Tree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tree tree0 = new Tree();
      int int0 = tree0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.toString();
      assertEquals(0, tree0.getSize());
  }
}
